pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')    // Ensure correct credential ID
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')  // Ensure correct credential ID
        AWS_DEFAULT_REGION = 'ap-south-1'
        PATH = "/opt/homebrew/bin:$PATH"  // Correct PATH to include terraform binary location
    }

    stages {
        stage('Terraform init') {
            steps {
                dir('/Users/gayathrimorampudi/terrproject') {  // Ensure this is your correct Terraform project directory
                    script {
                        try {
                            sh 'terraform init'
                        } catch (Exception e) {
                            error "Terraform init failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Terraform plan') {
            steps {
                dir('/Users/gayathrimorampudi/terrproject') {
                    script {
                        try {
                            sh 'terraform plan -out=tfplan'
                        } catch (Exception e) {
                            error "Terraform plan failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Terraform apply') {
            steps {
                dir('/Users/gayathrimorampudi/terrproject') {
                    script {
                        if (fileExists('tfplan')) {
                            try {
                                sh 'terraform apply -auto-approve tfplan'
                            } catch (Exception e) {
                                error "Terraform apply failed: ${e.getMessage()}"
                            }
                        } else {
                            error "Terraform plan file not found"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean up the workspace after the pipeline completes
        }

        failure {
            script {
                echo 'Pipeline failed! Please check the logs for more details.'
            }
        }

        success {
            script {
                echo 'Pipeline executed successfully!'
            }
        }
    }
}
